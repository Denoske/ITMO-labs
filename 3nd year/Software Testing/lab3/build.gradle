plugins {
    id 'java'
    id 'pmd'
    id 'jacoco'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.1'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation('org.seleniumhq.selenium:selenium-java:4.8.3')
    testImplementation 'org.slf4j:slf4j-simple:1.6.1'
    implementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.junit.platform:junit-platform-runner:1.9.2'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.9.2'


    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
    systemProperties([
            'browser': 'chrome',
            'junit.jupiter.execution.parallel.enabled': 'true',
            'junit.jupiter.execution.parallel.mode.default': 'concurrent',
    ])

    dependsOn pmdMain, pmdTest
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

pmd {
    consoleOutput = true
    toolVersion = "6.54.0"
    ruleSetFiles = files("config/pmd.xml") // Исключения только через внешний файл
    ruleSets = []
    pmdMain {
        excludes = [
                '**/Start.*',
                '**/jivesoftware/.*'
        ]
    }
}


jacocoTestReport {
    reports {
        html.enabled true
    }
}
jacocoTestCoverageVerification {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
//                    'testing_lab_3/src/test/java/integration/Start.class'
            ])
        }))
    }

    violationRules {
        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
    }
}
check.dependsOn jacocoTestReport, jacocoTestCoverageVerification
